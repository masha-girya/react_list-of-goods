{"version":3,"sources":["App.tsx","components/Goods.tsx","index.tsx"],"names":["SortType","Goods","React","memo","goods","map","good","goodsFromServer","getReorderedGoods","sortType","isReversed","visibleGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","App","state","NONE","sortBy","this","setState","className","type","onClick","handleGoodSort","handleGoodReverse","handleActionsReset","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,uFCXQC,EAAQC,IAAMC,MACzB,gBAAGC,EAAH,EAAGA,MAAH,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACIA,GADoBA,WDNnBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdJ,EADK,GAGJ,IADCK,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOP,GAEzB,OAAQK,GACN,KAAKT,EAASY,SACZD,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAChBD,EAAME,cAAcD,MAEtB,MAEF,KAAKf,EAASiB,OACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAChBD,EAAMI,OAASH,EAAMG,UAY3B,OAJIR,GACFC,EAAaQ,UAGRR,G,SAxCJX,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgDE,IAAMoB,EAAb,4MACEC,MAAQ,CACNX,YAAY,EACZD,SAAUT,EAASsB,MAHvB,oDAME,SAAeC,GACbC,KAAKC,SAAS,CAAEhB,SAAUc,MAP9B,+BAUE,WACEC,KAAKC,UAAS,SAACJ,GAAD,MAAY,CACxBX,YAAaW,EAAMX,iBAZzB,gCAgBE,WACEc,KAAKC,SAAS,CACZhB,SAAUT,EAASsB,KACnBZ,YAAY,MAnBlB,oBAuBE,WAAU,IAAD,OACP,EAAiCc,KAAKH,MAA9BZ,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WAElB,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACGjB,IAAaT,EAASsB,MACrB,qCACE,wBACEK,KAAK,SACLD,UAAU,0BACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASY,WAH9C,iCAQA,wBACEe,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASiB,SAH9C,+BAUHR,IAAaT,EAASY,UACrB,qCACE,wBACEe,KAAK,SACLD,UAAU,iBACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASY,WAH9C,iCAQA,wBACEe,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASiB,SAH9C,+BAUHR,IAAaT,EAASiB,QACrB,qCACE,wBACEU,KAAK,SACLD,UAAU,0BACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASY,WAH9C,iCAQA,wBACEe,KAAK,SACLD,UAAU,oBACVE,QAAS,kBAAM,EAAKC,eAAe7B,EAASiB,SAH9C,+BAUHP,EAEG,wBACEiB,KAAK,SACLD,UAAU,oBACVE,QAAS,kBAAM,EAAKE,qBAHtB,qBASA,wBACEH,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAM,EAAKE,qBAHtB,sBASFrB,IAAaT,EAASsB,MAAQZ,IAC9B,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAAM,EAAKG,sBAHtB,sBAUJ,cAAC9B,EAAD,CAAOG,MAAOI,EAAkBD,EAAiBiB,KAAKH,gBAxH9D,GAAyBnB,IAAM8B,WE/D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.10bea8fa.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Goods } from './components/Goods';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => (\n        good1.localeCompare(good2)\n      ));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => (\n        good1.length - good2.length\n      ));\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  handleGoodSort(sortBy: SortType) {\n    this.setState({ sortType: sortBy });\n  }\n\n  handleGoodReverse() {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  }\n\n  handleActionsReset() {\n    this.setState({\n      sortType: SortType.NONE,\n      isReversed: false,\n    });\n  }\n\n  render() {\n    const { sortType, isReversed } = this.state;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          {sortType === SortType.NONE && (\n            <>\n              <button\n                type=\"button\"\n                className=\"button is-info is-light\"\n                onClick={() => this.handleGoodSort(SortType.ALPHABET)}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-success is-light\"\n                onClick={() => this.handleGoodSort(SortType.LENGTH)}\n              >\n                Sort by length\n              </button>\n            </>\n          )}\n\n          {sortType === SortType.ALPHABET && (\n            <>\n              <button\n                type=\"button\"\n                className=\"button is-info\"\n                onClick={() => this.handleGoodSort(SortType.ALPHABET)}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-success is-light\"\n                onClick={() => this.handleGoodSort(SortType.LENGTH)}\n              >\n                Sort by length\n              </button>\n            </>\n          )}\n\n          {sortType === SortType.LENGTH && (\n            <>\n              <button\n                type=\"button\"\n                className=\"button is-info is-light\"\n                onClick={() => this.handleGoodSort(SortType.ALPHABET)}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-success\"\n                onClick={() => this.handleGoodSort(SortType.LENGTH)}\n              >\n                Sort by length\n              </button>\n            </>\n          )}\n\n          {isReversed\n            ? (\n              <button\n                type=\"button\"\n                className=\"button is-warning\"\n                onClick={() => this.handleGoodReverse()}\n              >\n                Reverse\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"button is-warning is-light\"\n                onClick={() => this.handleGoodReverse()}\n              >\n                Reverse\n              </button>\n            )}\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => this.handleActionsReset()}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <Goods goods={getReorderedGoods(goodsFromServer, this.state)} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport 'bulma/css/bulma.css';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const Goods = React.memo<Props>(\n  ({ goods }) => (\n    <ul>\n      {goods.map(good => (\n        <li data-cy=\"Good\" key={good}>\n          { good }\n        </li>\n      ))}\n    </ul>\n  ),\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}